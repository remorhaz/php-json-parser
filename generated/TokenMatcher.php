<?php
/**
 * Auto-generated file, please don't edit manually.
 * Generated by UniLex.
 */

namespace Remorhaz\JSON\Parser;

use Remorhaz\UniLex\IO\CharBufferInterface;
use Remorhaz\UniLex\Lexer\TokenFactoryInterface;
use Remorhaz\UniLex\Lexer\TokenMatcherTemplate;

class TokenMatcher extends TokenMatcherTemplate
{

    public function match(CharBufferInterface $buffer, TokenFactoryInterface $tokenFactory): bool
    {
        $context = $this->createContext($buffer, $tokenFactory);
        goto state1;

        state1:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x5B == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::LEFT_SQUARE_BRACKET);
            return true;
        }
        if (0x7B == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::LEFT_CURLY_BRACKET);
            return true;
        }
        if (0x5D == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::RIGHT_SQUARE_BRACKET);
            return true;
        }
        if (0x7D == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::RIGHT_CURLY_BRACKET);
            return true;
        }
        if (0x3A == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::COLON);
            return true;
        }
        if (0x2C == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::COMMA);
            return true;
        }
        if (0x09 == $char || 0x0A == $char || 0x0D == $char || 0x20 == $char) {
            $context->getBuffer()->nextSymbol();
            goto state8;
        }
        if (0x66 == $char) {
            $context->getBuffer()->nextSymbol();
            goto state9;
        }
        if (0x6E == $char) {
            $context->getBuffer()->nextSymbol();
            goto state10;
        }
        if (0x74 == $char) {
            $context->getBuffer()->nextSymbol();
            goto state11;
        }
        if (0x2E == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::DECIMAL_POINT);
            return true;
        }
        if (0x31 <= $char && $char <= 0x39) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::DIGIT_1_9);
            return true;
        }
        if (0x45 == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::E);
            return true;
        }
        if (0x2D == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::MINUS);
            return true;
        }
        if (0x2B == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::PLUS);
            return true;
        }
        if (0x30 == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::ZERO);
            return true;
        }
        if (0x22 == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::QUOTATION_MARK);
            // context -> string
            return true;
        }
        goto error;

        state8:
        if ($context->getBuffer()->isEnd()) {
            goto finish8;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x09 == $char || 0x0A == $char || 0x0D == $char || 0x20 == $char) {
            $context->getBuffer()->nextSymbol();
            goto state8;
        }
        finish8:
        $context->setNewToken(TokenType::WS);
        return true;

        state9:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x61 == $char) {
            $context->getBuffer()->nextSymbol();
            goto state25;
        }
        goto error;

        state10:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x75 == $char) {
            $context->getBuffer()->nextSymbol();
            goto state22;
        }
        goto error;

        state11:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x72 == $char) {
            $context->getBuffer()->nextSymbol();
            goto state19;
        }
        goto error;

        state19:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x75 == $char) {
            $context->getBuffer()->nextSymbol();
            goto state20;
        }
        goto error;

        state20:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x65 == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::TRUE);
            return true;
        }
        goto error;

        state22:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x6C == $char) {
            $context->getBuffer()->nextSymbol();
            goto state23;
        }
        goto error;

        state23:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x6C == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::NULL);
            return true;
        }
        goto error;

        state25:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x6C == $char) {
            $context->getBuffer()->nextSymbol();
            goto state26;
        }
        goto error;

        state26:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x73 == $char) {
            $context->getBuffer()->nextSymbol();
            goto state27;
        }
        goto error;

        state27:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x65 == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::FALSE);
            return true;
        }
        goto error;

        error:
        return false;
    }
}
