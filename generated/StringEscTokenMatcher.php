<?php
/**
 * Auto-generated file, please don't edit manually.
 * Generated by UniLex.
 */

namespace Remorhaz\JSON\Parser;

use Remorhaz\UniLex\IO\CharBufferInterface;
use Remorhaz\UniLex\Lexer\TokenFactoryInterface;
use Remorhaz\UniLex\Lexer\TokenMatcherTemplate;

class StringEscTokenMatcher extends TokenMatcherTemplate
{

    public function match(CharBufferInterface $buffer, TokenFactoryInterface $tokenFactory): bool
    {
        $context = $this->createContext($buffer, $tokenFactory);
        goto state1;

        state1:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x22 == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::QUOTATION_MARK);
            // context -> string
            return true;
        }
        if (0x5C == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::REVERSE_SOLIDUS);
            // context -> string
            return true;
        }
        if (0x2F == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::SOLIDUS);
            // context -> string
            return true;
        }
        if (0x62 == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::BACKSPACE);
            // context -> string
            return true;
        }
        if (0x66 == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::FORM_FEED);
            // context -> string
            return true;
        }
        if (0x6E == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::LINE_FEED);
            // context -> string
            return true;
        }
        if (0x72 == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::CARRIAGE_RETURN);
            // context -> string
            return true;
        }
        if (0x74 == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::TAB);
            // context -> string
            return true;
        }
        if (0x75 == $char) {
            $context->getBuffer()->nextSymbol();
            goto state10;
        }
        goto error;

        state10:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x30 <= $char && $char <= 0x39 ||
            0x41 <= $char && $char <= 0x46 ||
            0x61 == $char ||
            0x63 <= $char && $char <= 0x65
        ) {
            $context->getBuffer()->nextSymbol();
            goto state11;
        }
        goto error;

        state11:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x30 <= $char && $char <= 0x39 ||
            0x41 <= $char && $char <= 0x46 ||
            0x61 == $char ||
            0x63 <= $char && $char <= 0x65
        ) {
            $context->getBuffer()->nextSymbol();
            goto state12;
        }
        goto error;

        state12:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x30 <= $char && $char <= 0x39 ||
            0x41 <= $char && $char <= 0x46 ||
            0x61 == $char ||
            0x63 <= $char && $char <= 0x65
        ) {
            $context->getBuffer()->nextSymbol();
            goto state13;
        }
        goto error;

        state13:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x30 <= $char && $char <= 0x39 ||
            0x41 <= $char && $char <= 0x46 ||
            0x61 == $char ||
            0x63 <= $char && $char <= 0x65
        ) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::HEX);
            // context -> string
            return true;
        }
        goto error;

        error:
        return false;
    }
}
