<?php
/**
 * Auto-generated file, please don't edit manually.
 * Generated by UniLex.
 */

namespace Remorhaz\JSON\Parser;

use Remorhaz\UniLex\IO\CharBufferInterface;
use Remorhaz\UniLex\Lexer\TokenFactoryInterface;
use Remorhaz\UniLex\Lexer\TokenMatcherTemplate;

class StringTokenMatcher extends TokenMatcherTemplate
{

    public function match(CharBufferInterface $buffer, TokenFactoryInterface $tokenFactory): bool
    {
        $context = $this->createContext($buffer, $tokenFactory);
        goto state1;

        state1:
        if ($context->getBuffer()->isEnd()) {
            goto error;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x22 == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::QUOTATION_MARK);
            // context -> default
            return true;
        }
        if (0x5C == $char) {
            $context->getBuffer()->nextSymbol();
            $context->setNewToken(TokenType::ESCAPE);
            // context -> string esc
            return true;
        }
        if (0x20 == $char || 0x21 == $char || 0x23 <= $char && $char <= 0x5B || 0x5D <= $char && $char <= 0x10FFFF) {
            $context->getBuffer()->nextSymbol();
            goto state4;
        }
        goto error;

        state4:
        if ($context->getBuffer()->isEnd()) {
            goto finish4;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x20 == $char || 0x21 == $char || 0x23 <= $char && $char <= 0x5B || 0x5D <= $char && $char <= 0x10FFFF) {
            $context->getBuffer()->nextSymbol();
            goto state5;
        }
        finish4:
        $context->setNewToken(TokenType::UNESCAPED);
        return true;

        state5:
        if ($context->getBuffer()->isEnd()) {
            goto finish5;
        }
        $char = $context->getBuffer()->getSymbol();
        if (0x20 == $char || 0x21 == $char || 0x23 <= $char && $char <= 0x5B || 0x5D <= $char && $char <= 0x10FFFF) {
            $context->getBuffer()->nextSymbol();
            goto state5;
        }
        finish5:
        $context->setNewToken(TokenType::UNESCAPED);
        return true;

        error:
        return false;
    }
}
